# -*- coding: utf-8 -*-
"""Movie_Recommendation_system.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ktrW5nMFCTIo2RgMIyhYHZiMj15TLijU

**Title :- Movie recommendation system**

**Objective** :- The objective of a movie recommendation system is to provide personalized recommendations to users based on their past movie preferences or ratings. This system uses various machine learning algorithms and data analysis techniques to suggest movies that are likely to interest the user, thereby improving their overall movie-watching experience. By analyzing a user's viewing history and ratings, the system can generate recommendations that align with their tastes and preferences. Additionally, a movie recommendation system can help users discover new movies that they may not have known about, expanding their movie-watching horizons. Ultimately, the objective of a movie recommendation system is to enhance user satisfaction and engagement with the movie platform.

**Import Libraries**
"""

import pandas as pd

import numpy as np

"""**Import Dataset**"""

df = pd.read_csv(r'https://raw.githubusercontent.com/YBI-Foundation/Dataset/main/Movies%20Recommendation.csv')

df.head()

df.info()

df.shape

df.columns

"""**Get Feature Selection**"""

df_features = df[['Movie_Genre', 'Movie_Keywords', 'Movie_Tagline' , 'Movie_Cast', 'Movie_Director']].fillna('')

df_features.shape

df_features

x = df_features['Movie_Genre'] + ' ' + df_features['Movie_Keywords'] + ' ' + df_features['Movie_Tagline'] + ' '  + df_features['Movie_Cast'] + ' ' + df_features['Movie_Director']

x

x.shape

"""**Get Feature Text Conversion to Tokens**"""

from sklearn.feature_extraction.text import TfidfVectorizer

tfid = TfidfVectorizer()

x = tfid.fit_transform(x)

x.shape

print(x)

"""**Get Similarity Score Using Cosine Similarity**"""

from sklearn.metrics.pairwise import cosine_similarity

Similarity_Score = cosine_similarity(x)

Similarity_Score

Similarity_Score.shape

"""**Get Movie name from User as Input and Validate for Closest Spelling**"""

Favourite_Movie_Name = input('Enter your favourite movie name :')

All_Movies_Title_List = df['Movie_Title'].tolist()

import difflib

Movie_Recommendation = difflib.get_close_matches(Favourite_Movie_Name, All_Movies_Title_List)
print(Movie_Recommendation)

Close_Match = Movie_Recommendation[0]
print(Close_Match)

Index_of_Close_Match_Movie = df[df.Movie_Title == Close_Match]['Movie_ID'].values[0]
print (Index_of_Close_Match_Movie)

#getting list of similar movies
Recommendation_Score = list(enumerate(Similarity_Score[Index_of_Close_Match_Movie]))
print(Recommendation_Score)

len(Recommendation_Score)

"""**Get all movies sort based on recommendation score wrt favourite movie**"""

#sorting the movies based on their similarity score

Sorted_Similar_Movies = sorted(Recommendation_Score, key = lambda x:x[1], reverse = True)
print(Sorted_Similar_Movies)

#sorting the movies based on index

print('Top 30 Movies suggested for you : \n')

i = 1

for movie in Sorted_Similar_Movies:
  index = movie[0]
  title_from_index = df[df.index==index]['Movie_Title'].values[0]
  if (i<31):
    print(i, '.',title_from_index)
    i+=1

"""**Top 10 Movies Recommendation System**"""

Movie_Name = input('Enter your favourite movie name :')
list_of_all_titles = df['Movie_Title'].tolist()
Find_Close_Match = difflib.get_close_matches(Movie_Name,list_of_all_titles)
Close_Match = Find_Close_Match[0]
Index_of_Movie = df[df.Movie_Title == Close_Match]['Movie_ID'].values[0]
Recommendation_Score = list(enumerate(Similarity_Score[Index_of_Movie]))
sorted_similar_movies = sorted(Recommendation_Score, key = lambda x:x[1], reverse = True)

print('Top 10 Movies suggested for you : \n')

i = 1

for movie in sorted_similar_movies:
  index = movie[0]
  title_from_index = df[df.index==index]['Movie_Title'].values
  if (i<11):
    print(i, '.',title_from_index)
    i+=1